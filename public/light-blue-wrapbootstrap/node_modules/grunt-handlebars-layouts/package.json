{
  "name": "grunt-handlebars-layouts",
  "description": "Handlebars task to render Handlebars templates to HTML",
  "version": "0.1.6",
  "homepage": "https://github.com/thierryc/grunt-handlebars-layouts",
  "author": {
    "name": "Thierry Charbonnel",
    "email": "info@autreplanete.com",
    "url": "http://www.autreplanete.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thierryc/grunt-handlebars-layouts.git"
  },
  "bugs": {
    "url": "https://github.com/thierryc/grunt-handlebars-layouts/issues"
  },
  "main": "Gruntfile.js",
  "bin": {
    "grunt-handlebars-layouts": "bin/grunt-handlebars-layouts"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "handlebars": "~1.3.0",
    "async": "~0.2.9",
    "chalk": "^0.5.1",
    "lodash": "~2.4.1",
    "resolve-dep": "~0.5.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "0.1.x",
    "grunt-contrib-nodeunit": "0.1.x",
    "marked": "~0.3.2",
    "moment": "~2.0.0",
    "handlebars-helper-moment": "*"
  },
  "keywords": [
    "gruntplugin",
    "handlebars",
    "template"
  ],
  "readme": "Grunt Handlebars Layouts\n========================\n\nHandlebars helpers which implement Jade-like layout blocks.\n\n* Extend: extend layout (partial)\n* Append\n* Replace\n* Prepend\n\nA grunt.js task to render Handlebars templates against a context &amp; produce HTML\n\n### Resources\n\n* [Handlebars templates](http://handlebarsjs.com)\n* [Mustache](http://mustache.github.io)\n* [Treehouse Blog, Handlebars.js Part 2: Partials and Helpers](http://blog.teamtreehouse.com/handlebars-js-part-2-partials-and-helpers)\n* [NetTuts+: An Introduction to Handlebars](http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-handlebars/)\n\n## About\n\nThis task renders Handlebars templates against a context to produce HTML.\n\nInspired by [grunt-dust-html](https://github.com/ehynds/grunt-dust-html) and [handlebars-layouts](https://github.com/shannonmoeller/handlebars-layouts)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-handlebars-layouts --save-dev\n```\n\nNext, add this line to your project's grunt file:\n\n```js\ngrunt.loadNpmTasks(\"grunt-handlebars-layouts\");\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\nLastly, add the configuration settings (see below) to your grunt file.\n\n## Documentation\n\nThis task has two required properties, `src` and `dest`. `src` is the path to your source file and `dest` is the file this task will write to (relative to the grunt.js file). If this file already exists **it will be overwritten**.\n\n```js\n  files: {\n    'dest.html': 'src.html'\n  },\n```\n\nAn example configuration looks like this:\n\n```js\n  grunt.initConfig({\n    handlebarslayouts: {\n      home: {\n        files: {\n          'dist/home.html': 'src/home.html'\n        },\n        options: {\n          partials: [\n            'src/partials/*.hbs',\n            'src/layout.html'\n          ],\n          modules: [\n            'src/helpers/helpers-*.js'\n          ],\n          basePath: 'src/',\n          context: {\n            title: 'Layout Test',\n            items: [\n              'apple',\n              'orange',\n              'banana'\n            ]\n          }\n        }\n      }\n    }\n  });\n  grunt.registerTask('default', ['handlebarslayouts']);\n```\n\n### Optional Configuration Properties\n\nThis plugin can be customized by specifying the following options:\n\n* `partials`: partials files.\n* `basePath`: The base location to all your templates so that includes/partials can be resolved correctly.\n* `context`: A JavaScript object to render the template against. This option supports a few different types:\n* `modules`: add your customs helpers\n* `strict`: when is true the process fails if one file is missing (when is false juste a warning is trigger)\n\nUseful Handlebars Helpers : [handlebars-helpers](https://github.com/assemble/handlebars-helpers)\n\n**String**: the location to a file containing valid JSON:\n\n```js\ncontext: '/path/to/file.json'\n```\n\n**Object**: a regular ol' JavaScript object:\n\n```js\ncontext: {\n  pageTitle: 'My Awesome Website'\n}\n```\n\n**Array**: an array of contexts, either string (files to parse) or JavaScript objects, or both. Each item in the array will be merged into a single context and rendered against the template:\n    \n```js\ncontext: [\n  'path/to/context.json',\n  'path/to/another/context.json',\n  { more: 'data' }\n]\n```\n\n### Template example\n\n```html\n{{#extend \"layout\"}}\n    {{#append \"head\"}}\n      <link rel=\"stylesheet\" href=\"assets/css/home.css\" />\n    {{/append}}\n\n    {{#replace \"body\"}}\n      <h2>Welcome Home</h2>\n\n      <ul>\n        {{#items}}\n          <li>{{.}}</li>\n        {{/items}}\n      </ul>\n    {{/replace}}\n\n    {{#prepend \"footer\"}}\n      <script src=\"assets/js/analytics.js\"></script>\n    {{/prepend}}\n{{/extend}}\n```\n\n### Layout example\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    {{#block \"head\"}}\n          <title>{{title}}</title>\n          <meta name=\"description\" content=\"\">\n    {{/block}}\n  </head>\n\n  <body>\n    <div class=\"site\">\n      <div class=\"site-hd\" role=\"banner\">\n        {{#block \"header\"}}\n            <h1>{{title}}</h1>\n        {{/block}}\n      </div>\n\n      <div class=\"site-bd\" role=\"main\">\n        {{#block \"body\"}}\n            <h2>Hello World</h2>\n        {{/block}}\n      </div>\n\n      <div class=\"site-ft\" role=\"contentinfo\">\n        {{#block \"footer\"}}\n            <small>&copy; 2014</small>\n        {{/block}}\n      </div>\n    </div>\n\n    {{#block \"footer\"}}\n      <p>footer</p>\n    {{/block}}\n  \n    {{> footer}}\n  </body>\n</html>\n```\n\n### Partial example\n\n```html\n<footer>footer</footer>\n```\n\n### Custom Helper example\n\nHelpers can either be an object or a single register function. If register is on the object, then it calls the register function, passing in the engine. \n\n```js\nmodule.exports.register = function (Handlebars, options)  { \n  Handlebars.registerHelper('foo', function ()  { \n    return 'foo';\n  });\n};\n```\n\n#### MD5 Helper (inspired by [handlebars-md5](https://github.com/neoziro/handlebars-md5))\n\n```js\n'use strict';\n\nvar crypto = require('crypto'),\n    fs = require('fs');\n\n// The module to be exported\nvar helpers = {\n  md5: function (path) {\n    var content = fs.readFileSync(path);\n    return crypto.createHash('md5').update(content).digest('hex');\n  }\n};\n\n// Export helpers\nmodule.exports.register = function (Handlebars, options) {\n  options = options || {};\n\n  for (var helper in helpers) {\n    if (helpers.hasOwnProperty(helper)) {\n      Handlebars.registerHelper(helper, helpers[helper]);\n    }\n  }\n};\n```\n\n#### Foo and bar Helpers\n\n```js\n'use strict';\n\n// The module to be exported\nvar helpers = {\n  foo: function () {\n    return 'foo';\n  },\n  bar: function () {\n    return 'bar';\n  }\n};\n\n// Export helpers\nmodule.exports.register = function (Handlebars, options) {\n  options = options || {};\n\n  for (var helper in helpers) {\n    if (helpers.hasOwnProperty(helper)) {\n      Handlebars.registerHelper(helper, helpers[helper]);\n    }\n  }\n};\n```\n\n#### Handlebars Markdown Helper\n\nVery simple Markdown for partial. **do not forget** to add your .md files to the partial list.\n\n```js\noptions: {\n  partials: 'src/partials/*.md',\n  ...\n}\n```\n\n```js\n/**\n * Handlebars Markdown Helpers\n * Copyright (c) 2014 Thierry Charbonnel\n * Licensed under the MIT License (MIT).\n */\n'use strict';\n\nvar marked = require('marked');\n\n// Export helpers\nmodule.exports.register = function (Handlebars, options) {\n  options = options || {};\n  options.marked = options.marked || {\n    renderer: new marked.Renderer(),\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: true,\n    smartLists: true,\n    smartypants: false\n  };\n  \n  Handlebars.registerHelper('md', function(name, context){\n    var result;\n    marked.setOptions(options.marked);\n    // Convert inline markdown by prepending the name string with `:`\n    if(name.match(/^:/)) {\n      result = marked(name.replace(/^:/, ''));\n    } else {\n      try {\n        result = marked(Handlebars.partials[name]);\n      } catch(err) {\n        result = '<!-- error -->'; \n      }\n    }\n    return new Handlebars.SafeString(result); \n  });  \n};\n\n```\n\n## npm Helpers \n\nAdd it in devDependencies and in gruntfiles.js\n\n```js\n\"devDependencies\": {\n  \"handlebars-helper-moment\": \"*\"\n},\n```\n\nAdd it in gruntfiles.js\n\n```js\nhandlebarslayouts: {\n  home: {\n    files: {\n      'dist/home.html': 'src/home.html',\n      'dist/index.html': 'src/index.html'\n    },\n    options: {\n      ...\n      modules: ['src/helpers/helpers-*.js', 'handlebars-helper-moment'],\n      ...\n    }\n  }\n}\n```\n\nor ( v0.1.4 > )\n\n```js\nhandlebarslayouts: {\n  home: {\n    files: {\n      'dist/*.html': 'src/*.hsb'\n    },\n    options: {\n      ...\n      modules: ['src/helpers/helpers-*.js', 'handlebars-helper-moment'],\n      ...\n    }\n  }\n}\n```\n\n```\nnpm install\n```\n\n### Tested Helpers\n\n* [handlebars-helper-moment](https://github.com/helpers/handlebars-helper-moment)\n\n\n## suggested structure\n\n### A basic Handlebars-layouts site usually looks something like this:\n\n```\n.\n├── partials\n|   ├── footer.(html|hsb|md)\n|   └── header.(html|hsb|md)\n├── pages\n|   ├── 2014-08-14-Handlebars-layouts-foo.(html|hsb)\n|   └── 2014-08-14-Handlebars-layouts-bar.(html|hsb)\n├── data\n|   └── members.json\n├── helpers\n|   └── helpers-*.js\n└── index.html\n```\n\n=======\n\n## Other interresting projects \n\n* To precompile Handlebars templates to JST file use [grunt-contrib-handlebars](https://github.com/gruntjs/grunt-contrib-handlebars)\n* Static site generator for Grunt.js, Yeoman and Node.js. [Assemble](http://assemble.io)\n* This task renders Dust templates against a context to produce HTML. [grunt-dust-html](https://github.com/ehynds/grunt-dust-html) \n* Handlebars helpers which implement Jade-like layout blocks for Node project [handlebars-layouts](https://github.com/shannonmoeller/handlebars-layouts)\n* Library of 100+ handlebars helpers. [handlebars-helpers](https://github.com/assemble/handlebars-helpers)\n\n## Release History and Roadmap\n\n * 2014-10-08   v0.1.5   windows fix.\n * 2014-10-08   v0.1.4   Add * for files list and unique name for Partials.\n * 2014-09-05   v0.1.3   Better log error + strict mode.\n * 2014-09-05   v0.1.1   Async optimisation.\n * 2014-09-03   v0.1.0   First Release.\n * 2014-08-14   v0.0.*   Alpha ans Beta Releases\n\n## License\n\nCopyright (c) 2014 Thierry Charbonnel, contributors.  \nReleased under the MIT license\n",
  "readmeFilename": "README.md",
  "_id": "grunt-handlebars-layouts@0.1.6",
  "_shasum": "807e63813cb26f37c3894da751acbc4eef888ad3",
  "_from": "https://registry.npmjs.org/grunt-handlebars-layouts/-/grunt-handlebars-layouts-0.1.6.tgz",
  "_resolved": "https://registry.npmjs.org/grunt-handlebars-layouts/-/grunt-handlebars-layouts-0.1.6.tgz"
}
